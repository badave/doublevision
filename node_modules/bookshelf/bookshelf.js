// Bookshelf.js 0.6.1
// ---------------

//     (c) 2013 Tim Griesser
//     Bookshelf may be freely distributed under the MIT license.
//     For all details and documentation:
//     http://bookshelfjs.org

// All external libraries needed in this scope.
var _          = require('lodash');
var Knex       = require('knex');

var ModelBase       = require('./dialects/base/model');
var CollectionBase  = require('./dialects/base/collection');
var RelationBase    = require('./dialects/base/relation');

// All local dependencies... These are the main objects that
// need to be augmented in the constructor to work properly.
var SqlModel      = require('./dialects/sql/model');
var SqlCollection = require('./dialects/sql/collection');
var SqlRelation   = require('./dialects/sql/relation');

// Finally, the `Events`, which we've supplemented with a `triggerThen`
// method to allow for asynchronous event handling via promises. We also
// mix this into the prototypes of the main objects in the library.
var Events        = require('./dialects/base/events');

// Mongo
var Mongo           = require('mongo-gyro');
var MongoModel      = require('./dialects/mongo/model');
var MongoCollection = require('./dialects/mongo/collection');

/**
 * Bookshelf constructor
 *
 * Can be instantiated by either Bookshelf(options) or new Bookshelf(options)
 *
 * Options is config for knex if its client is mysql, postgres, sqlite3, or pg
 * Options can be an instance of a knex clientbase
 * Options is config for mongodb if its client is set to mongo
 * Options can be an instance of Mongo from dialects/mongo/mongo
 * 
 * @param {object} options
 */
var Bookshelf = function(options) {
  options = options || {};
  var knex, mongo;

  // Allows you to construct the library with either `Bookshelf(opts)`
  // or `new Bookshelf(opts)`.
  if (!(this instanceof Bookshelf)) {
    return new Bookshelf(options);
  }

  // Allows you to pass in a Knex Instance as options
  if(options.client instanceof Knex.ClientBase) {
    knex = options;
  }
  // Allows you to pass in a Mongo Instance as options
  if(options instanceof Mongo) {
    mongo = options;
  }

  // If options.client is one of the sqls or knex instance
  if(knex || (options.client && _.contains(["mysql", "postgres", "sqlite3", "pg"], options.client))) {
    // If knex is undefined, create a new Knex client
    if(!knex) {
      knex = new Knex(options);
    }

    // Grab a reference to the `knex` instance passed (or created) in this constructor,
    // for convenience.
    this.db = this.knex = knex;

    this.Model = SqlModel.extend({
      db: knex,
      _relation: function(type, Target, options) {
        return new Relation(type, Target, options);
      }
    });

    this.Collection = SqlCollection.extend({
      model: this.Model
    });

    var Relation = this.Relation = SqlRelation.extend({
      Model: this.Model,
      Collection: this.Collection
    });
  } else if(mongo || (options.client && (options.client === "mongo" || options.client === "mongodb"))) {
    // For a new mongodb
    if(!mongo) {
      // options.url is expected to be the url or undefined for localhost
      mongo = new Mongo(options.url);
    }

    // for convenience
    this.db = this.mongo = mongo;

    this.Model = MongoModel.extend({
      db: mongo,
      _relation: function(type, Target, options) {
        return new Relation(type, Target, options);
      }
    });

    this.Collection = MongoCollection.extend({
      db: mongo,
      model: this.Model
    });
  } else {
    this.Model = ModelBase;
    this.Collection = CollectionBase;
    this.Relation = RelationBase;
  }

  return this;
};

// A `Bookshelf` instance may be used as a top-level pub-sub bus, as it mixes in the
// `Events` object. It also contains the version number, and a `Transaction` method
// referencing the correct version of `knex` passed into the object.
_.extend(Bookshelf.prototype, Events, {

  // Keep in sync with `package.json`.
  VERSION: '0.6.2',

  // Helper method to wrap a series of Bookshelf actions in a `knex` transaction block;
  transaction: function() {
    if(this.knex) {
      return this.knex.transaction.apply(this, arguments);
    }
  },
  // Provides a nice, tested, standardized way of adding plugins to a `Bookshelf` instance,
  // injecting the current instance into the plugin, which should be a module.exports.
  plugin: function(plugin) {
    plugin(this);
    return this;
  }
});

// Alias to `new Bookshelf(opts)`.
Bookshelf.initialize = function(options) {
  return new this(options);
};

Bookshelf.Model = ModelBase;
Bookshelf.Collection = CollectionBase;
Bookshelf.Relation = RelationBase;

Bookshelf.Sql = {};
Bookshelf.Sql.Model = SqlModel;
Bookshelf.Sql.Collection = SqlCollection;
Bookshelf.Sql.Relation = SqlRelation;

Bookshelf.Mongo = Mongo;
Bookshelf.Mongo.Model = MongoModel;
Bookshelf.Mongo.Collection = MongoCollection;

// The `forge` function properly instantiates a new Model or Collection
// without needing the `new` operator... to make object creation cleaner
// and more chainable.
SqlModel.forge = SqlCollection.forge = Bookshelf.Mongo.Model.forge = Bookshelf.Mongo.Collection.forge = function() {
  var inst = Object.create(this.prototype);
  var obj = this.apply(inst, arguments);
  return (Object(obj) === obj ? obj : inst);
};

// Finally, export `Bookshelf` to the world.
module.exports = Bookshelf;
