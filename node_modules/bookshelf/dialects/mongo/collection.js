// Collection
// ---------------
var _             = require('lodash');

var Sync          = require('./sync');
var Helpers       = require('./helpers');
var CollectionBase = require('../base/collection');
var Promise        = require('../base/promise');

module.exports = CollectionBase.extend({

  // Fetch the models for this collection, resetting the models
  // for the query when they arrive.
  fetch: Promise.method(function(options) {
    options = options ? _.clone(options) : {};
    var sync = this.sync(options)
      .find()
      .bind(this)
      .tap(function(response) {
        if (!response || response.length === 0) {
          if (options.require) throw new Error('EmptyResponse');
          return Promise.reject(null);
        }
      })

      // Now, load all of the data onto the collection as necessary.
      .tap(this._handleResponse);

    return sync.tap(function(response) {
      return this.triggerThen('fetched', this, response, options);
    })
    .caught(function(err) {
      if (err !== null) throw err;
      this.reset([], {silent: true});
    })
    .yield(this);
  }),

  count: Promise.method(function(options) {
    options = options ? _.clone(options) : {};
    return this.sync(options).count();
  }),

  // Shortcut for creating a new model, saving, and adding to the collection.
  // Returns a promise which will resolve with the model added to the collection.
  create: Promise.method(function(model, options) {
    options = options ? _.clone(options) : {};
    model = this._prepareModel(model, options);

    return model.save(null, options)
      .bind(this)
      .then(function() {
        this.add(model, options);
        return model;
      });
  }),

  // Returns an instance of the query builder.
  query: function() {
    return Helpers.query(this, _.toArray(arguments));
  },

  // Creates and returns a new `Bookshelf.Sync` instance.
  sync: function(options) {
    return new Sync(this, options);
  },

  // Handles the response data for the collection, returning from the collection's fetch call.
  _handleResponse: function(response) {
    this.set(response, {silent: true, parse: true}).invoke('_reset');
  }
});