var Promise = global.testPromise;

module.exports = function(Bookshelf) {

  describe('Collection', function() {

    var Backbone = require('backbone');

    var Models      = require('../helpers/objects')(Bookshelf).Models;
    var Collections = require('../helpers/objects')(Bookshelf).Collections;

    // Models
    var Site     = Models.Site;
    var SiteMeta = Models.SiteMeta;
    var Admin    = Models.Admin;
    var Author   = Models.Author;
    var Blog     = Models.Blog;
    var Post     = Models.Post;
    var Comment  = Models.Comment;
    var Tag      = Models.Tag;
    var User     = Models.User;
    var Role     = Models.Role;
    var Photo    = Models.Photo;

    // Collections
    var Sites    = Collections.Sites;
    var Admins   = Collections.Admins;
    var Blogs    = Collections.Blogs;
    var Posts    = Collections.Posts;
    var Comments = Collections.Comment;
    var Photos   = Collections.Photos;

    describe('fetch', function() {

      it ('fetches the models in a collection', function() {
        var collection = new Posts();
        var other_collection = new Posts();

        return collection.create({"title": "A long post"})
          .then(function() {
            return other_collection.fetch();
          })
          .then(function(other_collection) {
            other_collection.length.should.equal(1);
            other_collection.first().id.toString().should.equal(collection.first().id)
          });
      });

    });

    describe('sync', function() {

      it('creates a new instance of Sync', function(){
        var model = new Bookshelf.Model();
        expect(model.sync(model)).to.be.an.instanceOf(require('../../../dialects/mongo/sync'));
      });

    });

    describe('create', function() {

      it('creates and saves a new model instance, saving it to the collection', function () {
        return new Sites().create({name: 'google.com'}).then(function(model) {
          expect(model.get('name')).to.equal('google.com');
          return model.destroy();
        });

      });

    });

  });

};